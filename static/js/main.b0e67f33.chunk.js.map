{"version":3,"sources":["logo.svg","component/login.js","component/logout.js","component/admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","login","props","state","username","password","loggedin","onChange","bind","submitForm","e","this","setState","target","name","value","preventDefault","localStorage","setItem","loggedIn","notification","error","message","to","className","style","textAlign","marginTop","textTransform","onSubmit","htmlFor","type","placeholder","defaultChecked","backgroundColor","href","Component","logout","Admin","App","exact","path","component","admin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,wMCItBC,E,kDACjB,WAAYC,GAAO,IAAD,6BACd,cAAMA,IAEDC,MAAQ,CACTC,SAAU,GACVC,SAAS,GACTC,UAJW,GAMf,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATJ,E,qDAaTE,GAELC,KAAKC,SAAL,eACKF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,iCAGvBL,GAEPA,EAAEM,iBADN,MAEkCL,KAAKR,MAA3BC,EAFZ,EAEYA,SAAUC,EAFtB,EAEsBA,SACF,UAAbD,GAAmC,UAAXC,GAEvBY,aAAaC,QAAQ,QAAQ,mBAC7BP,KAAKC,SAAS,CACVO,UAAU,KAKdC,IAAaC,MAAM,CACfC,QAAS,4B,+BAKjB,OAAGX,KAAKR,MAAMgB,SACH,kBAAC,IAAD,CAAUI,GAAG,WAGpB,yBAAKC,UAAU,iBACX,wBACIC,MAAO,CACPC,UAAW,SACXC,UAAW,GACXC,cAAe,cAJnB,UAOA,0BAAMC,SAAUlB,KAAKF,YAMjB,yBAAKe,UAAU,aACX,2BAAOM,QAAQ,SACf,wCAEA,2BAAOC,KAAK,OAAOC,YAAY,WAAWlB,KAAK,WAAWC,MAAOJ,KAAKR,MAAMC,SAAUG,SAAUI,KAAKJ,WAJzG,2BAImJ,2BAAOuB,QAAQ,OAC9J,wCAEA,2BAAOC,KAAK,WAAWC,YAAY,WAAWlB,KAAK,WAAWC,MAAOJ,KAAKR,MAAME,SAAUE,SAAUI,KAAKJ,WACzG,4BAAQwB,KAAK,UAAb,SACA,+BACA,2BAAOA,KAAK,WAAWE,eAAe,UAAUnB,KAAK,aAAc,IADnE,gBAKJ,yBAAKU,UAAU,YAAYC,MAAO,CAAES,gBAAiB,YACjD,4BAAQH,KAAK,SAASP,UAAU,aAAhC,UAGA,0BAAMA,UAAU,OAAhB,UACO,uBAAGW,KAAK,KAAR,qB,GA5EIC,aCDdC,E,uKAEb,OACI,6BACI,yDACA,kBAAC,IAAD,CAAMd,GAAG,KAAT,oB,GALoBa,a,qECgIrBE,MAlCf,aCzEeC,E,uKAbX,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWL,U,GAPvBD,aCGEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLwC,QAAQxC,MAAMA,EAAMC,c","file":"static/js/main.b0e67f33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { notification } from 'antd'\r\n\r\nexport default class login extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        let loggedin = false\r\n        this.state = {\r\n            username: '',\r\n            password:'',\r\n            loggedin\r\n        }\r\n        this.onChange = this.onChange.bind(this)\r\n        this.submitForm = this.submitForm.bind(this)\r\n\r\n    }\r\n    \r\n    onChange(e)\r\n    {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    submitForm(e)\r\n    {\r\n        e.preventDefault()\r\n        const { username, password} = this.state\r\n        if(username === \"admin\" && password===\"admin\")\r\n        {\r\n            localStorage.setItem(\"token\",\"jzxcbmjbxckuiqe\")\r\n            this.setState({\r\n                loggedIn: true\r\n            })\r\n        }\r\n        else \r\n        {\r\n            notification.error({\r\n                message: 'Some thing went wrong',\r\n              });\r\n        }\r\n    }\r\n    render() {\r\n        if(this.state.loggedIn){\r\n            return <Redirect to=\"/admin\"/>\r\n        }\r\n        return (\r\n            <div className=\"containermain\">\r\n                <h1\r\n                    style={{\r\n                    textAlign: 'center',\r\n                    marginTop: 10,\r\n                    textTransform: 'uppercase',\r\n                }}> LOGIN   \r\n                </h1>\r\n                <form onSubmit={this.submitForm}>\r\n                    {/* <input type=\"text\" placeholder=\"username\" name=\"username\" value={this.state.username} onChange={this.onChange}></input>\r\n                    <br/>\r\n                    <input type=\"password\" placeholder=\"password\" name=\"password\" value={this.state.password} onChange={this.onChange}></input>\r\n                    <br/>\r\n                    <input type=\"submit\"></input> */}\r\n                    <div className=\"container\">\r\n                        <label htmlFor=\"uname\">\r\n                        <b>Username</b>\r\n                        </label>\r\n                        <input type=\"text\" placeholder=\"username\" name=\"username\" value={this.state.username} onChange={this.onChange}></input>                        <label htmlFor=\"psw\">\r\n                        <b>Password</b>\r\n                        </label>\r\n                        <input type=\"password\" placeholder=\"password\" name=\"password\" value={this.state.password} onChange={this.onChange}></input>\r\n                        <button type=\"submit\">Login</button>\r\n                        <label>\r\n                        <input type=\"checkbox\" defaultChecked=\"checked\" name=\"remember\" />{\" \"}\r\n                        Remember me\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"container\" style={{ backgroundColor: \"#f1f1f1\" }}>\r\n                        <button type=\"button\" className=\"cancelbtn\">\r\n                        Cancel\r\n                        </button>\r\n                        <span className=\"psw\">\r\n                        Forgot <a href=\"#\">password?</a>\r\n                        </span>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class logout extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>You have been logged out!</h1>\r\n                <Link to=\"/\">Login Again</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\r\nimport {Link} from 'react-router-dom'\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { Card, notification, Popconfirm, Spin, Table } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  FirebaseAppProvider,\r\n  SuspenseWithPerf,\r\n  useFirestore,\r\n  useFirestoreCollection,\r\n} from 'reactfire';\r\nimport moment from 'moment';\r\n\r\nexport const formatDate = (text, type = 'hh:mm:ss DD/MM/YYYY') => {\r\n  return text ? moment.unix(text).format(type) : moment.unix().format(type);\r\n};\r\n\r\n// Config firebase\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyAWTCk97SDQiIKN5Q9fSV-BjyErwnLbN4Q',\r\n  authDomain: 'test-ab67b.firebaseapp.com',\r\n  databaseURL: 'https://test-ab67b.firebaseio.com',\r\n  projectId: 'test-ab67b',\r\n  storageBucket: 'test-ab67b.appspot.com',\r\n  messagingSenderId: '785307903347',\r\n  appId: '1:785307903347:web:353228ff2576d9395bd106',\r\n  measurementId: 'G-7YQKZ7JR1J',\r\n};\r\n\r\n\r\n// Tao table\r\nfunction Data() {\r\n  const dataCollection = useFirestore().collection('Data');\r\n\r\n  // Get data\r\n  const data = useFirestoreCollection(dataCollection).docs.map((e) => ({\r\n    id: e.id,\r\n    ...e.data(),\r\n  }));\r\n  const columns = [\r\n    {\r\n      title: 'Car Id',\r\n      dataIndex: 'CardID',\r\n      key: 'CardID',\r\n    },\r\n    {\r\n      title: 'Car Plate',\r\n      dataIndex: 'Car_plate',\r\n      key: 'Car_plate',\r\n    },\r\n    {\r\n      title: 'Time In',\r\n      dataIndex: 'Time_In',\r\n      key: 'Time_In',\r\n      render: (row, data) => <span> {formatDate(row?.seconds)}</span>,\r\n    },\r\n    {\r\n      title: 'Time Out',\r\n      dataIndex: 'Time_Out',\r\n      key: 'Time_Out',\r\n      render: (row, data) => <span> {formatDate(row?.seconds)}</span>,\r\n    },\r\n    {\r\n      title: 'Delete',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      render: (row) => (\r\n        <Popconfirm\r\n          title=\"Are you sure delete this item?\"\r\n          onConfirm={async () => {\r\n            try {\r\n              // delete\r\n              await dataCollection.doc(row).delete();\r\n              notification.success({\r\n                message: 'Delete success',\r\n              });\r\n            } catch {\r\n              notification.error({\r\n                message: 'Some thing went wrong',\r\n              });\r\n            }\r\n          }}\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n        >\r\n          <DeleteOutlined style={{ cursor: 'pointer' }} />\r\n        </Popconfirm>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <Card title=\"Danh sách dữ liệu\" style={{ margin: 20 }}>\r\n      <Table dataSource={data} columns={columns} />\r\n    </Card>\r\n  );\r\n}\r\n\r\nfunction Admin() {\r\n  return (\r\n    // Lien ket firebase\r\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\r\n      <SuspenseWithPerf fallback={<Spin />}>\r\n        <h1\r\n          style={{\r\n            textAlign: 'center',\r\n            marginTop: 10,\r\n            textTransform: 'uppercase',\r\n          }}\r\n        >\r\n          Hệ thống gửi xe tự động tại nơi công cộng\r\n        </h1>\r\n        \r\n        <Data />\r\n      </SuspenseWithPerf>\r\n      <div>\r\n            <Link to=\"/\" style={{\r\n                position: 'relative',\r\n                left: 1400,\r\n                background: '#4CAF50',\r\n                color: 'white',\r\n                padding: 15,\r\n                margin: 8,\r\n                border: 'none',\r\n                cursor: 'pointer',\r\n                width: 100\r\n            }}>Logout</Link>\r\n        </div>\r\n    </FirebaseAppProvider>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport login from './component/login'\nimport logout from './component/logout'\nimport admin from './component/admin'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={login} />\n        <Route path=\"/admin\" component={admin}/>\n        <Route path=\"/logout\" component={logout}/>\n      </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}